List
===========
mylist = []
mylist = list()
- ordered, mutable, allows duplicates
- different datatypes
- index accessible

- iteratable using for in loop
	for val in mylist:
	
- to check if an item inside a list
	if "banana" in mylist:

- length method
	len(mylist)
	
- append method
	mylist.append("blue)
	
- insert method
	mylist.insert(2, "red")
	
- remove an item
	mylist.pop()
	this also returns the removed item.
	
- remove a secific method
	mylist.remove("black")
	
- remove all/ clear method
	mylist.clear()
	
- reverse method
	mylist.reverse()
	
- sort method
	mylist.sort()
	sorts the original list it self
	
	newlist = sorted(mylist)
	original list does not change
	
- create a new list with same value
	mylist = [1]*10
	
- concatenate a list
	newlist = mylist + [5]*6
	
- slicing a list
	newlist = mylist[2:8]
	slice the elements from index 2 to 7
	
	if you dont specify a start/stop index, it goes all the way from beginning/end
	
	optional step index
	newlist = [::2]
	gets every second item
	
	reversing a list mylist[::-1]
	
- copying a list
	newlist = mylist
	it does not create a new list object
	any change in newlist will make similar change in mylist
	
	best way
	newlist = mylist.copy()
	
	another way
	 newlist = mylist[:]
	
- list comprehension
	newlist = [i for i in mylist]
	copied the list here
	
	squaring
	newlist = [i*i for i in mylist]
	
	syntax: [expression + for in loop]


Tuple
==========
- ordered, immutable collection of datatypes
- similar to list, but elements can not be changed after creation
- normally used for objects that grouped togethor

mytuple = ()
mytuple = tuple()

mytuple = (1,2,"new")
- paranthesis are opztional
- if you are creating a tuple with only one element "," is mandatory
	mytuple = ("blue") : this is not a tuple, but string
	mytuple = ("blue",) : this is a tuple with one element
	
- create a tuple from list
	mytuple = tuple([1,2,"blue"])
	
- index accessible
	mytuple[3]
	
- iteratable using for in loop
	for i in mytuple:
	
- element inside a tuple:
	if 'blue' in mytuple:
	
- length method
	len(mytuple)
	
- count method
	mytuple.count("`black")
	
- find index method
	mytuple.index("brown")
	returns first index of the element
	if element is not present, value error
	
- convert tuple to list
	mylist = list(mytuple)
	
- convert list to tuple
	mytuple = tuple(mylist)
	
- slicing a tuple
	newtuple = mytuple[2:8]
	all rules are same as list slicing
	
- unpacking a tuple
	mytuple = ("John", 18, "USA")
	name, age, country = mytuple
	number of elements should match
	
- unpacking multiple elements
	i1, *iall, ilast = mytuple
	here * takes all the other items and make it as list
	
- tuple is immutable, so python can make some optimisation.
so it is efficent when working with large amount of data

- for the same elements, tuple use less memory to store than list
- tuple creation is also faster than list
- tuple operations are effient than list

Dict
============
- unordered, mutable, key-value pair
- dict keys can be any immutable item like string, numbers, tuple

- empty list
	mydict = dict()

- intialisation
	mydict = {"name": "John", "age" = 18}
	
	mydict = dict(name = "John", age=27)
	no need to use " for keys
	
- access values
	mydict["name"]
	a key error is possible if key is not present

- adding keys
	mydict["country"] = "USA"
	
- delete items
	del mydict["name"]
	
	or 
	mydict.pop("name")
	
	or
	mydict.popitem() : removes the last added item
	
- check a key is present in a dict (2 ways)
	if "name" in mydict:
	
	or use a try-except logic
	
- loop through dict (several ways)
	for key in mydict:
	loop through keys
	
	for key in mydict.keys():
	loop through the keys (same as above)
	
	for val in mydict.values():
	loop through the values
	
	for key,val in mydict.items:
	loop through key-value pair
	
- copying a dict
	newdict = mydict
	newdict is same as original (same object)
	
	newdict = mydict.copy()
	
	or
	newdict = dict(mydict)
	
- merge two dicts (update method)
	mydict.update(newdict)
	overwrites the already existing key-value pairs
	also adds the new key-value that are not alread existing
	
- tuple as key
	mydict = P{("first","last") : "John Smith", "age":19}
	list is mutable, so can not be used as a key

Sets
==============
- unordered, mutable
- unlike list or tuple, it does not allow duplicates

-empty set
	myset = set()
	
	important
	myset = {} this will create an emty dict
	
- initialisation
	myset = {1,2,3}
	
	from a list
	myset = set([1,2,3])

	from string
	myset = set("Hello")
	it will create {'o', 'H', 'l', 'e'}
	
- add method
	myset.add(2)
	
- remove method
	myset.remove(2)
	possible key error
	
	or
	myset.discard()
	this will not do anything if key is not present

- empty the set
	myset.clear()
	
- pop method
	myset.pop()
	pop out an arbitary key
	it returns the popped out key
	
- loop through set
	for i in myset:
	
- element is present in a set
	if 1 in myset:
	
- union of sets
	newset = myset.union(anotherset)
	
	to change the same set
	myset.update(anotherset)
	
- intersection of sets
	newset = myset.intersection(anotherset)
	
	to change the same set
	newset.intersection_update(otherset)
	
- difference in sets
	newset = myset.difference(otherset)
	it takes all the numbers in myset that is not available in otherset
	
	to change the same set
	myset.difference_update(otherset)
	
- symmetric_difference
	another difference method is symmetric_difference
	newset = myset.symmetric_difference(otherset)
	
	to chanfe the same set
	newset.symmetric_difference_update(otherset)
	
- subset check method
	setA.subset(setB): returns t/f
	
- superset check method
	setA.superset(setB)
	
- disjoint check method / no intersection
	setA.disjoint(setB)

- copying sets
	 setA = setA
	 does not perform hard copy. its the same object
	 
	 setA = setB.copy()
	 
	 or
	 setA = set(setB)
	 
- frozen set
	immutable set
	setA = frozenset([1,2,3,4])

String
=============
- ordered, immutable datatype

- empty string
	mystring = ''
	
- initialisation
	mystring = 'hello world'
	
	for multiline string use """
	
	\ for writing string in two lines, but still its a single line string
	
- index accessible like list, tuple
	strings are immutable, so it can not be changed
	
- creating substring
	use slicing technique
	all rules for list slicing is applicable here
	
	for example
	reverse = mystring[::-1]
	
- concatenate string
	mystring = str1 + str2
	
- iterate over string
	for i in mystring
	
- check if a char/substring is present
	if "a" (or "lem") in mystring:
	
- strip method
	removes the additonal white space
	mystring.strip()
	
	since string is immutable, we need to re assign
	mystring = mystring.strip()
	
- upper case method
	mystring = mystring.upper() / again reassigning is important
	
- lower case method
	mystring = mystring.lower()
	
- starts with a char/subset
	mystring.startswith("h")

- ends with a char/substring
	mystring.endswith("le")
	
- find a char/subset
	returns the first index where its found, otherwise return -1
	mystring.find("o")
	
- count number of char/subset
	mystring.count("he")
	
- replace a char/substring
	mystring = mystring.replace("world", "earth")
	re assign is important
	if it does not find char/subset, does not do anything
	
- convert to a list
	mylist = mystring.split() 
	split by comma space etc.. by default its space
	
- convert from list to string / join method
	mystring = ",".join(mylist)
	joins all the elements of the list and add commas in bw them
	
	this is very usefull
	mystring = "".join(mylist) / joins all the elements
	
	do not use for loop and concatenate every element
	that is inefficient
	
- string place holders (this is old)
	%s for char , %d for int, %f for float
	mystring = "the value is %d" %var_name
	
	.format method
	mystring = "the value is {} and {}".format{var_name, var_name1}
	
	f-string
	mystring = f"the value is {var_name} and {var_name1}
	
	f-string is better and faster
	we can also do runtime calculation inside the {}
