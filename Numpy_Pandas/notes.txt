Numpy
-------
Numpy library provides specialised datastructure and functions and other tools for numerical computing in Python

for example, if you want to do elementwise multiplication (dot product) we need to write functions to do that in python
in numpy, we have built in functions to do the elementwise multiplication

also numpy libraries are already precombiled in c++ language, so that Python interpreter has no thing do but call the function
Due to this numpy functions are 50 times faster than equivalnet implementation in Python



Python list vs Numpy array
-------------------
python list can have mutiple datatypes, but this comes with a cost.
each elelemnt in the list will be stored in mutiple, not conitnuous memory location and poniter to each memory location will be stored in list object.

Where are np array only accepts same datatype (if different datatypes are given, np array does the datatype promotion make it as common datatype like float od something (if possible, otherwise error)

Python also give array types instead of list which stores same datatype in a continuous memory segments

What makes numpy popular is the operation that we perform on its arrays
Np array also provide multidimentional array handling

Np array attributes
------------------

ndim - dimension
shape - length in each dimension
size - total ellemnt x*y*z

Array indexing
-------------------

similar to list indexing

for single dim
use index
arr[0]	- 0th value 

for mutidim:
arr[2,1] - 2nd row 1st column
using tuple with location 
arr[(2,1)]

-ve indexing also works as in the case of lists
arr[(-1,-2)]


Array slicing or acessing sub arrays
------------------------------------
similar to python slicing

arr[start:stop:step]

default values
arr[start-0:stop=size, step=1]

1D array
arr[1:4] - values from 1st index to 3rd index
arr[:5] - first five elements
arr[5:] - elements from fifth elelmnts onwards

arr[::2] - every other elelemnt
arr[1::2] - every other element starting from 1)
arr[::-1] - complete element in reverse order
arr[5::-2] - starting from 5 reverse every other elelemnt

MultiDim array
arr[:2, 1:] - rows 0 and 1, all column except 0
arr[:,::2] all rows and every other column
arr[::-1,::-1] - reverse rows and columns

Accessing one row or column
-------------------------
arr[0,:] - 0th row
arr[:,1] = first column

*Slicing python list is performed on copies, where as Np array actually modify original array itself

if copy is needed, arr[2,:2].copy()

Reshaping of arrays
--------------------
arr.reshape((3,4)) - with a tuple input
provided reshaped array fits the number of elements exactly
size 12 ndarry can be reshaped into 12x1, 1x12, 1x2x6, 3x4 etc

instead  of reshape, nexaxis can also be used
arr[np.newaxis, :]

Concatenating arrays
------------------------
1D array
np.concatenate([x1,x2,x3]) - merge all arrays in to one

Multidim
np.concatenate([x1,x2,x3], axis=0) - concatenate along vertical axis(arrays will be added at the bottom)
axis =1 - array will be added to the right

when working with arrays with mixed dimension
use np.hstack and np.vstack (horizontal and verical)

also for third axis, use np.dstack

Splitting of arrays
-----------------------
np.slit
np.vsplit
np.hsplit

also np.dsplit

np.split(x, [1,2]) - 3 arrays row1 row 2 and rest

x1, x2, x3 = np.split(x, [3,5])
Note that array is split by N times you get N+1 sub arrays

Array operations
----------------
elementwise operations
+,-,/,*,%,**, //(floor_divide

you can also use np.add(x1,x2), np.substract(x1,2) etc

absolute value
---------------
np.abs(x) : shows absolute value of all elements

trignometric functions
----------------
theta = np.linspace(0, np.pi, 100)

np.sin(theta)
np.cos(theta)
np.tan(theta)

inverse
np.arcsin(x)
np.arccos(x)
np.arctan(x)

exponenets and logs
-----------------
np.exp(x) - e^x
np.exp2(x) - 2^x
np.power(3,x) - 3^x

np.log(x)
np.log2(x)
np.log10(x)


arrays
------

values = np.array([1,2,3,4])

np.array can work with all datatypes int, float string, bool

multi-dimention array

values - np.array([1,2],[2,3])

numpy array can use any dimentional array

values.shape gives the length of array in each dimension

all element will be of same datatypes

values.dtype - shows the datatypes
numpy will convert all datatypes into same if possible, otherwise throws error
# numpy has its own datatypes like float64 etc

np.matmul(matrix1, matrix2) : does the matrix multiplication


np.array indexing
-----------------


array indexing is same as Python
we can have multidimensional array indexing

1D: values[3]
2D: values[2,3]
3D: values[1,2,1]

slicing techinques also work same as Python, here you can have multiple dimension

values[:2, 3:5]	(excluding 3 and 5 : same rule as Python)
 


np.arange
------------
its similar to range function in Python

np.arange(10) : produces 0 to 9
np.arange(1,20) : produces array from 1 to 19
np.arange(2,20,3) : produces array from 2 to 17 insteps of 3

np.linspace
------------
produces array with desired numer of elements between start and stop points

np.linspace(0,10,100) : creates array of 100 equidisanced points between 0 and 10 (including stop value)

rp.reshape
----------
its used to convert the dimension

ex: if you have a matrix of dimension 3*6, you can convert it to 18*1,1*18, 6*3, 1*2*9 etc
as long as the total number of positions are same

arithamatic operations
-----------------------
+ - / * : works as bitwise opereration

also multiplication/division by a scalar

broadcasting
-------------
when you add 5x2 to 1x2, it will replicate 1x2 to 5 times to match no of rows and add it to row-wise



